
$git config --global                                                    配置git仓库
$git init                                                               初始化仓库
$git add                                                                给仓库添加要管理的文件->stage（把工作区文件修改放到暂存区）
$git commit -m                                                          提交内容到仓库（把暂存区的所有修改提交到分支）
$git status                                                             查看仓库当前的状态
$git diff                                                               查看改变的内容
$git log						                                        查看最近到最远提交日志
$git log --pretty=oneline                                               查看最近到最远提交日志(简单)
$git reflog                                                             查看历史日志
$git reset --hard commit_id                                             回退版本，改变Head指针指向的提交命令ID 节点 $git reset --hard HEAD^^^^
$git reset HEAD readme.txt                                              可以把暂存区的修改撤销掉（unstage)，重新放回工作区。
$git checkout -- file                                                   放弃工作区修改内容,就是让这个工作区文件回到最近一次git commit 或者 git add 时的状态
$cat filename                                                           查看工作区文件内容
$ssh-keygen -t rsa -C "hezhian_git2020@yeah.net"                        生成公私 rsa key Pair.
$git remote add origin git@github.com:hejikaigittree/learngit.git       关联远程GitHub仓库
$git push -u origin master                                              第一次将本地主分支推送到相关联远程仓库
$git push origin master                                                 将本地主分支推送到相关联远程仓库
$git clone git@github.com:hejikaigittree/gitskills.git                  初次开发时，将远程仓库克隆至本地仓库
$git checkout -b dev                                                    创建并切换新分支
$git branch                                                             查看当前分支
$git merge dev                                                          合并指定分支到当前分支。fast forward
$git checkout <branch>                                                  切换到指定分支
$git switch -c dev                                                      新版本git无歧义的创建并切换到新分支的指令
$git switch master                                                      切换到主分支
$git branch -d  <name>                                                  删除指定分支
$git log --graph --pretty==oneline --abbrev-commit                      分支合并图，简单提交ID ,一行显示日志。
$git merge --no-ff -m"merge with no-ff" dev                             使用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并看不出来曾经做过合并
$git stash                                                              可以把当前工作现场存储起来，等以后恢复现场后继续工作
$git stash list                                                         查看存储的工作现场
$git stash apply                                                        恢复stash存储的内容，stash内容并不删除
$git stash pop                                                          恢复stash存储的内容，同时把stash内容也删除了
$git cherry-pick  commit-id                                             复制一个特定的提交到当前分支
$git branch -D dev                                                      丢弃一个没有被合并过的分支，强行删除分支，git branch -d <name>删除分支时报错
$git remote                                                             查看远程库信息
$git remote -v                                                          显示远程库详细信息
$git pull                                                               拉取远程仓库之前，需要指定本地dev分支与远程origin/dev分支的链接。
$git branch --set-upstream-to=origin/dev dev                            指定本地dev分支与远程origin/dev分支之间的链接。
1.当对文件连续修改时。提交内容只有被提交到缓存区的修改内容。
2.自修改后还没有被放到暂存区，现在撤销修改就回回到和版本库一模一样的状态。
3.已经将修改添加到暂存区，然后又对工作区进行修改，那么，再撤销修改就会回到添加到暂存区后的状态.
撤销修改小结：
场景1. 当你改乱了工作区某个文件内容，想直接丢弃工作区的修改时，用命令 git checkout -- file
场景2. 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，像丢弃修改，分两步，第一步用命令 git reset HEAD <file> ，第二部再按场景1操作。
场景3. 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退操作，不过前提时没有把本地版本库推送到远程版本库。
远程仓库：
https://github.com/hejikaigittree
使用git bash 给自己电脑生成一个SSH 公钥 和私钥。 公钥的内容加进GitHub中。
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的。而不是别人冒充的。而Git支持SSH协议。所以GitHub只要知道了你的公钥，就可以确定只有你自己才能推送。
当然GitHub允许你添加多个key。在GitHub上免费托管的Git仓库，任何人都可以看到，但只有你自己才能改。
如果不想别人看到。一个交钱，一个自己搭建Git服务器。
合并主分支之前先切换到主分支后再合并。
实际开发中，我们应该按照几个基本原则进行分支管理:
首先，master分支应该时非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本。
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
$git push origin master 将本地主分支推送到相关联远程仓库
$git push origin dev 将本地开发dev分支推送到相关联远程仓库
什么分支需要推送远程仓库？
master 分支是主分支，因此要时刻与远程同步；
dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug 分支只用于在本地修复bug.就没有必要推送到远程了。除非老板要看看你每周完成了多少bug修复
feature分支是否推送到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的♥情而定。

模拟多人合作时，切换到D盘 CD D:\\后调用git clone,将远程仓库克隆至本地仓库。
克隆时发现，默认情况下，你的小伙伴只能看到本地的master分支。但是你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到
本地。git checkout -b dev origin/dev。
多人合作工作模式小结。
查看远程分支信息。使用git remote -v
本地新建分支如果不推送到远程，对其他人就不可见
从本地推送分支，使用git push origin branch-name,如果推送失败，先用git pull抓取远程的新提交。
从本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name,本地和远程分支的名称最好一致
建本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name
从远程抓取分支，使用git pull，如果有冲突，要先解决冲突。